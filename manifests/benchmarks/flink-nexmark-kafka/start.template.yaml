apiVersion: batch/v1
kind: Job
metadata:
  name: ${BENCHMARK_JOB_NAME}
  namespace: ${BENCHMARK_NAMESPACE}
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        benchmark/system: kube-bench
        benchmark/mutual-exclusive-key: "${BENCHMARK_PODS_DISTRIBUTION_MUTUAL_EXCLUSIVE_KEY}"
    spec:
      nodeSelector: ${BENCHMARK_PODS_DISTRIBUTION_GEN_NODE_SELECTOR}
      restartPolicy: Never
      volumes:
      - name: kafka-sources
        configMap:
          name: nexmark-kafka-sources-${BENCHMARK_JOB_NAME}
      - name: queries
        configMap:
          name: nexmark-queries-${BENCHMARK_JOB_NAME}
      - name: flink-config-volume
        configMap:
          name: flink-config
          items:
            - key: flink-conf.yaml
              path: flink-conf.yaml
      containers:
      - name: start
        image: ghcr.io/risingwavelabs/flink-sql-cli:${BENCHMARK_FLINK_IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /nexmark/kafka-sources
          name: kafka-sources
          readOnly: true
        - mountPath: /nexmark/queries
          name: queries
          readOnly: true
        - name: flink-config-volume
          mountPath: /opt/flink/conf/
          readOnly: true
        command:
        - bash
        args:
        - -c
        - |-
          IFS=',' read -ra QUERIES <<< "${BENCHMARK_NEXMARK_QUERY}"
          for query in "$${TRICK_SYMBOLS_EMPTY}{QUERIES[@]}"; do
            echo -e "/nexmark/kafka-sources/create.sql"
            cat /nexmark/kafka-sources/create.sql
            echo -e "/nexmark/queries/$${TRICK_SYMBOLS_EMPTY}{query}.sql"
            cat /nexmark/queries/$${TRICK_SYMBOLS_EMPTY}{query}.sql
            /opt/flink/bin/sql-client.sh embedded -l /opt/sql-client/lib -i /nexmark/kafka-sources/create.sql -f /nexmark/queries/$${TRICK_SYMBOLS_EMPTY}{query}.sql
          done